name: Rebase Chaos Branches

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  rebase:
    name: Rebase Chaos Branches
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to push to branches

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

      - name: Fetch Latest Changes
        run: |
          git fetch --prune origin
          git fetch origin main

      - name: Rebase Branches
        id: rebase
        env:
          PR_BRANCHES: ${{ vars.PR_BRANCHES }}
        run: |
          # Initialize arrays to track results
          FAILED_BRANCHES=()
          SUCCESSFUL_BRANCHES=()
          NO_CHANGES_BRANCHES=()

          # Read branches into an array
          IFS=' ' read -ra BRANCHES <<< "$PR_BRANCHES"

          for branch in "${BRANCHES[@]}"; do
             echo "Processing branch: $branch"

            # Ensure we have the latest state of the branch
            git fetch origin $branch

            # Checkout the branch
            git checkout $branch

            # Get the current commit hash before rebase
            OLD_COMMIT=$(git rev-parse HEAD)

            # Attempt to rebase
            if git rebase origin/main; then
              # Get the new commit hash after rebase
              NEW_COMMIT=$(git rev-parse HEAD)

              # Only push if there were actual changes
              if [ "$OLD_COMMIT" != "$NEW_COMMIT" ]; then
                git push origin $branch --force
                echo "Successfully rebased and pushed $branch"
                SUCCESSFUL_BRANCHES+=("$branch")
              else
                echo "No changes needed for $branch"
                NO_CHANGES_BRANCHES+=("$branch")
              fi
            else
              # If rebase fails, abort and log error
              git rebase --abort
              echo "Failed to rebase $branch"
              FAILED_BRANCHES+=("$branch")
            fi

            # Clean up
            git checkout main
            git clean -fd
          done

          # Report results
          echo "=== Rebase Results ==="
          echo "Successfully rebased branches:"
          printf '%s\n' "${SUCCESSFUL_BRANCHES[@]}"
          echo ""
          echo "Branches with no changes needed:"
          printf '%s\n' "${NO_CHANGES_BRANCHES[@]}"
          echo ""
          echo "Failed branches:"
          printf '%s\n' "${FAILED_BRANCHES[@]}"

          # Set output for potential use in other steps
          echo "failed_branches=${FAILED_BRANCHES[*]}" >> $GITHUB_OUTPUT

          # Exit with failure if any branches failed
          if [ ${#FAILED_BRANCHES[@]} -gt 0 ]; then
            echo "::error::Some branches failed to rebase. Check the logs for details."
            exit 1
          fi
