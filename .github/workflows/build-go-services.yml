name: Build Go Services

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'src/checkout/**'
      - 'src/product-catalog/**'
      - '.github/workflows/build-go-services.yml'
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #     - 'src/checkout/**'
  #     - 'src/product-catalog/**'

env:
  DOCKERHUB_REGISTRY: docker.io
  DOCKERHUB_IMAGE_NAME: sherlocksai/otel-demo

jobs:
  determine-services:
    name: Determine Services to Build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Matrix
        id: set-matrix
        run: |
          # For workflow_dispatch, build all services
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "matrix={\"service\":[\"checkout\",\"product-catalog\"]}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For push events, check changed files
          if [ "${{ github.event_name }}" = "push" ]; then
            # Check if workflow file was changed
            if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} 2>/dev/null | grep -q "^.github/workflows/build-go-services.yml$"; then
              echo "matrix={\"service\":[\"checkout\",\"product-catalog\"]}" >> $GITHUB_OUTPUT
              exit 0
            fi

            # Check which services were changed
            SERVICES=()
            if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} 2>/dev/null | grep -q "^src/checkout/"; then
              SERVICES+=("checkout")
            fi
            if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} 2>/dev/null | grep -q "^src/product-catalog/"; then
              SERVICES+=("product-catalog")
            fi

            if [ ${#SERVICES[@]} -eq 0 ]; then
              echo "matrix={\"service\":[\"none\"]}" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "matrix={\"service\":$(echo ${SERVICES[@]} | jq -R -s -c 'split(" ")')}" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build Go Services
    needs: determine-services
    if: ${{ fromJson(needs.determine-services.outputs.matrix).service != null && fromJson(needs.determine-services.outputs.matrix).service[0] != 'none' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.determine-services.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install protoc-gen-go and protoc-gen-go-grpc
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate protobuf
        run: |
          cd src/${{ matrix.service }}
          go generate

      - name: Build
        run: |
          cd src/${{ matrix.service }}
          go build -v ./...

      - name: Test
        run: |
          cd src/${{ matrix.service }}
          go test -v ./...

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/${{ matrix.service }}/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}-${{ matrix.service }}:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
