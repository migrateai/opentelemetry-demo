apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: opentelemetry-demo
  namespace: argocd
  annotations:
    argocd-image-updater.argoproj.io/image-list: checkout=sherlocksai/otel-demo-checkout:latest,product-catalog=sherlocksai/otel-demo-product-catalog:latest,load-generator=sherlocksai/otel-demo-load-generator:latest
    argocd-image-updater.argoproj.io/checkout.update-strategy: digest
    argocd-image-updater.argoproj.io/checkout.force-update: "true"
    argocd-image-updater.argoproj.io/checkout.pull-secret: pullsecret:argocd/argocd-image-updater-secret
    argocd-image-updater.argoproj.io/checkout.helm.image-name: components.checkout.imageOverride.repository
    argocd-image-updater.argoproj.io/checkout.helm.image-tag: components.checkout.imageOverride.tag
    argocd-image-updater.argoproj.io/product-catalog.update-strategy: digest
    argocd-image-updater.argoproj.io/product-catalog.force-update: "true"
    argocd-image-updater.argoproj.io/product-catalog.pull-secret: pullsecret:argocd/argocd-image-updater-secret
    argocd-image-updater.argoproj.io/product-catalog.helm.image-name: components.product-catalog.imageOverride.repository
    argocd-image-updater.argoproj.io/product-catalog.helm.image-tag: components.product-catalog.imageOverride.tag
    argocd-image-updater.argoproj.io/load-generator.update-strategy: digest
    argocd-image-updater.argoproj.io/load-generator.force-update: "true"
    argocd-image-updater.argoproj.io/load-generator.pull-secret: pullsecret:argocd/argocd-image-updater-secret
    argocd-image-updater.argoproj.io/load-generator.helm.image-name: components.load-generator.imageOverride.repository
    argocd-image-updater.argoproj.io/load-generator.helm.image-tag: components.load-generator.imageOverride.tag
    argocd-image-updater.argoproj.io/write-back-method: argocd
spec:
  project: default
  source:
    chart: opentelemetry-demo
    repoURL: https://migrateai.github.io/opentelemetry-helm-charts
    targetRevision: 0.37.9
    helm:
      releaseName: my-otel-demo
      values: |
        components:
          checkout:
            imageOverride: sherlocksai/otel-demo-checkout-service
            tag: latest
            pullPolicy: Always
          frontend:
            imageOverride:
              repository: sherlocksai/otel-demo-frontend
              tag: latest
              pullPolicy: Always
          load-generator:
            imageOverride:
              repository: sherlocksai/otel-demo-load-generator
              tag: latest
              pullPolicy: Always
          product-catalog:
            resources:
              limits:
                memory: 250Mi
              requests:
                memory: 100Mi
                cpu: 20m

        prometheus:
          server:
            resources:
              requests:
                memory: "512Mi"
                cpu: "500m"
              limits:
                memory: "1Gi"
                cpu: "1"
            serverFiles:
              prometheus.yml:
                global:
                  scrape_interval: 15s
                  evaluation_interval: 15s
            persistentVolume:
              enabled: true
              size: 10Gi
              storageClass: gp2
              mountPath: /data
              subPath: ""
            emptyDir: {}
            configMapOverrideName: ""
            configFromSecret: ""
            storage:
              volumeClaimTemplate: null
            extraConfigmapMounts: []
            extraSecretMounts: []
            extraHostPathMounts: []



        opentelemetry-collector:
          enabled: true
          image:
            repository: "otel/opentelemetry-collector-contrib"
          fullnameOverride: otel-collector
          mode: deployment
          presets:
            kubernetesAttributes:
              enabled: true
          resources:
            limits:
              memory: 200Mi
          service:
            type: ClusterIP
          ports:
            metrics:
              enabled: true
          podAnnotations:
            prometheus.io/scrape: "true"
            opentelemetry_community_demo: "true"
          config:
            receivers:
              otlp:
                protocols:
                  http:
                    cors:
                      allowed_origins:
                        - "http://*"
                        - "https://*"
              httpcheck/frontend-proxy:
                targets:
                  - endpoint: http://frontend-proxy:8080
              redis:
                endpoint: "valkey-cart:6379"
                collection_interval: 10s

            exporters:
              otlp:
                endpoint: jaeger-collector:4317
                tls:
                  insecure: true
              otlphttp/prometheus:
                endpoint: http://prometheus:9090/api/v1/otlp
                tls:
                  insecure: true
              opensearch:
                logs_index: otel
                http:
                  endpoint: http://opensearch:9200
                  tls:
                    insecure: true
              otlp/signoz:
                endpoint: signoz-otel-collector.signoz:4317
                tls:
                  insecure: true

            processors:
              transform:
                error_mode: ignore
                trace_statements:
                  - context: span
                    statements:
                      - replace_pattern(name, "\\?.*", "")
                      - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
              resource:
                attributes:
                - key: service.instance.id
                  from_attribute: k8s.pod.uid
                  action: insert

            connectors:
              spanmetrics: {}

            service:
              pipelines:
                traces:
                  receivers: [otlp]
                  processors: [memory_limiter, resource, transform, batch]
                  exporters: [otlp, otlp/signoz, debug, spanmetrics]
                metrics:
                  receivers: [httpcheck/frontend-proxy, redis, otlp, spanmetrics]
                  processors: [memory_limiter, resource, batch]
                  exporters: [otlphttp/prometheus, otlp/signoz, debug]
                logs:
                  receivers: [otlp]
                  processors: [memory_limiter, resource, batch]
                  exporters: [opensearch, otlp/signoz, debug]
              telemetry:
                metrics:
                  level: detailed
                  readers:
                    - periodic:
                        interval: 10000
                        timeout: 5000
                        exporter:
                          otlp:
                            protocol: grpc
                            endpoint: otel-collector:4318
      valueFiles:
        - values.yaml  # Relative to the kubernetes/ path in the Git repo
  destination:
    server: https://kubernetes.default.svc
    namespace: otel-demo-namespace
  syncPolicy:
    automated:
      prune: false
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  ignoreDifferences:
    - group: ""
      kind: ConfigMap
      name: opensearch-config
      namespace: lyrid-016d2205-3e0f-4ef0-aa64-d7debe01f0b1
      jsonPointers:
        - /data
    - group: ""
      kind: Service
      name: ad
      namespace: lyrid-016d2205-3e0f-4ef0-aa64-d7debe01f0b1
      jsonPointers:
        - /spec
    - group: ""
      kind: Service
      name: cart
      namespace: lyrid-016d2205-3e0f-4ef0-aa64-d7debe01f0b1
      jsonPointers:
        - /spec
    - group: apps
      kind: Deployment
      name: jaeger
      namespace: lyrid-016d2205-3e0f-4ef0-aa64-d7debe01f0b1
      jsonPointers:
        - /spec/selector
    - group: apps
      kind: StatefulSet
      name: opensearch
      namespace: lyrid-016d2205-3e0f-4ef0-aa64-d7debe01f0b1
      jsonPointers:
        - /spec
    - kind: ConfigMap
      name: grafana-dashboards
      namespace: lyrid-016d2205-3e0f-4ef0-aa64-d7debe01f0b1
      jsonPointers:
        - /metadata/annotations
    - group: apps
      kind: Deployment
      name: grafana
      namespace: lyrid-016d2205-3e0f-4ef0-aa64-d7debe01f0b1
      jsonPointers:
        - /spec
    - group: ""
      kind: PersistentVolumeClaim
      name: prometheus
      namespace: lyrid-016d2205-3e0f-4ef0-aa64-d7debe01f0b1
      jsonPointers:
        - /spec
        - /status
        - /metadata/annotations
        - /metadata/labels
        - /metadata/finalizers
        - /metadata/resourceVersion
        - /metadata/uid